name: Version & Release

on:
  push:
    branches:
      - master

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      has-new-release: ${{ steps.check_tag.outputs.exists == 'false' }}
    steps:
    - uses: actions/checkout@v4
    - name: Read version
      id: read_version
      run: |
        version=`cat VERSION`
        echo "version: $version"
        echo "##[set-output name=version;]v$version"
    - uses: mukunku/tag-exists-action@v1.0.0
      id: check_tag
      with:
        tag: ${{ steps.read_version.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Create Release
      if: ${{ steps.check_tag.outputs.exists == 'false' }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.read_version.outputs.version }}
        name: ${{ steps.read_version.outputs.version }}
        body: Version ${{ steps.read_version.outputs.version }}
        draft: false
        prerelease: false
    - name: Release already exists
      if: ${{ steps.check_tag.outputs.exists == 'true' }}
      run: echo "Release ${{ steps.read_version.outputs.version }} already exists"

  provision-master-stack:
    name: Provision master stack
    needs: check-version
    if: ${{ needs.check-version.outputs.has-new-release == 'true' }}
    runs-on: ubuntu-latest
    env:
      BRANCH: master
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_KYIVMURAL_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_KYIVMURAL_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_KYIVMURAL_REGION }}
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Install pipenv
        run: python -m pip install --upgrade pip wheel pipenv
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm ci
      - name: Install Serveless
        run: npm install -g serverless@3
      - name: Deploy
        run: serverless deploy --stage master
        env:
          KYIVMURAL_API_ENDPOINT: ${{ secrets.KYIVMURAL_API_ENDPOINT_MASTER }}
          KYIVMURAL_API_ID: ${{ secrets.KYIVMURAL_API_ID_MASTER }}
          KYIVMURAL_API_STAGE: ${{ secrets.KYIVMURAL_API_STAGE_MASTER }}
          DEFAULT_LANG_CODE: ${{ secrets.DEFAULT_LANG_CODE }}
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}
